0000:              .org 00h 
0000: 02 00 03     ljmp main
                   
                   main:
0003: 12 00 99         lcall init
                       loop:
0006: 12 00 A9             lcall getkey        ; Get a Button Press, R0 used to
0009: 79 04                mov R1, #04h
                   
000B: 99                   SUBB A, R1
                           ;JZ Cef
000C: 79 04                mov R1, #04h
000E: 99                   SUBB A, R1
000F: 60 4A                JZ Bef
0011: 79 04                mov R1, #04h
0013: 99                   SUBB A, R1
0014: 60 0C                JZ Aef
0016: 24 0C                ADD A, #0Ch ; reset if it fails all the tests
                           norm:
0018: 12 00 BA                 lcall fix           ; Obtain the freq hex code i
001B: 12 00 CD                 lcall num
001E: 80 E6                    sjmp loop
                           endloop:
0020: 80 E4                    sjmp loop
                   Aef:                    ; Ramps the Light from Level 9 to Le
0022: 24 0C            ADD A, #0Ch
0024: F8               mov R0, A
0025: 12 00 BA         lcall fix           ; Retrieve High Frequency from Level
                   
0028: 90 FE 00         mov dptr, #0FE00h   ; Initialize the lights to high
002B: F0               movx @dptr, A       ; Move in the low byte to #FE00h
002C: F9               mov R1, A
002D: 90 FE 00         mov dptr, #0FE00h
0030: 74 01            mov a, #01h
0032: F0               movx @dptr, A       ; Move in the high byte to #FE00h
                   
                       counterinit:
                   
0033: 7D 05            mov R5, #05h
0035: ED               mov A, R5
                       counter:
0036: 7A FF                mov R2, #0FFh
0038: 7B FF                mov R3, #0FFh
003A: 7C FF                mov R4, #0FFh
003C: 60 09                jz here 
                           lvl1:
003E: DA FE                DJNZ R2, lvl1
                               lvl2:
0040: DA FE                    DJNZ R2, lvl2
                                   lvl3:
0042: DB FE                            DJNZ R3, lvl3
0044: 14                               dec A
0045: 80 EF                    sjmp counter
                   
                       here:
0047: E9                   mov A, R1               ; Move Low byte into acc
0048: 94 05                SUBB A, #05h
004A: 60 0C                jz exit
004C: 90 FE 00             mov dptr, #0FE00h   ; Initialize the lights to high
004F: F0                   movx @dptr, A       ; Move in the low byte to #FE00h
0050: 90 FE 00             mov dptr, #0FE00h
0053: 74 01                mov a, #01h
0055: F0                   movx @dptr, A
0056: 80 DB                sjmp counterinit
                   
                       exit:
0058: E8                   mov A, R0
0059: 80 C5                sjmp endloop
                   
                   
                   Bef:                    ; Ramps the Light from Level 0 to Le
005B: 24 08            ADD A, #08h
005D: F8               mov R0, A
005E: 12 00 BA         lcall fix           ; Retrieve High Frequency from Level
                   
0061: 90 FE 00         mov dptr, #0FE00h   ; Initialize the lights to high
0064: F0               movx @dptr, A       ; Move in the low byte to #FE00h
0065: F9               mov R1, A
0066: 90 FE 00         mov dptr, #0FE00h
0069: 74 01            mov a, #01h
006B: F0               movx @dptr, A       ; Move in the high byte to #FE00h
                   
                       counterinit2:
                   
006C: 7D FF            mov R5, #0FFh
006E: ED               mov A, R5
                       counter2:
006F: 7A FF                mov R2, #0FFh
0071: 7B FF                mov R3, #0FFh
0073: 7C FF                mov R4, #0FFh
0075: 60 09                jz here2 
                           lvl12:
0077: DA FE                DJNZ R2, lvl12
                               lvl22:
0079: DA FE                    DJNZ R2, lvl22
                                   lvl32:
007B: DB FE                            DJNZ R3, lvl32
007D: 14                               dec A
007E: 80 EF                    sjmp counter2
                       here2:
0080: E9                   mov A, R1               ; Move Low byte into acc
0081: 24 05                ADD A, #05h
0083: 60 D3                jz exit
0085: 90 FE 00             mov dptr, #0FE00h   ; Initialize the lights to high
0088: F0                   movx @dptr, A       ; Move in the low byte to #FE00h
0089: F9                   mov R1, A
008A: 90 FE 00             mov dptr, #0FE00h
008D: 74 01                mov a, #01h
008F: F0                   movx @dptr, A
                   
0090: 80 DA                sjmp counterinit2
                   
                       exit2:
0092: E8                   mov A, R0
0093: 22                   ret
                   Cef:
0094: 24 04            ADD A, #04h
0096: F8               mov R0, a
0097: E8               mov a, R0
0098: 22               ret
                   
                   init:
0099: 90 FE 03         mov dptr, #0FE03h
009C: 74 36            mov A, #36h
009E: F0               movx @dptr, A     ; Update Control Byte with 36
009F: 75 89 02         mov TMOD, #02h  ; Set Mode
00A2: 88 8C            mov TH0, R0     ; Set Count
00A4: D2 8C            setb TR0
00A6: 75 A8 82         mov IE, #82h 
                   
                   getkey:
00A9: 30 B3 FD         jnb P3.3, getkey        ; Jump if bit not set, wait for 
00AC: 75 90 FF         mov P1, #0FFh           ; Set Port 1 high to be read
                       pressdone:              
00AF: 20 B3 FD             jb P3.3, pressdone  ; If press detected, wait for it
00B2: E5 90                mov a, P1           ; Reading to Port 1
00B4: C3                   clr C             
00B5: 94 F0                SUBB A, #0F0h       ; Make first nibble 0s
00B7: F5 90                mov P1, a; Writing to Port 1
                           ;clr P1
00B9: 22                   ret
                   
                   fix:
00BA: 04               inc a                   ; increment acc
00BB: 83               movc a, @a+pc           ; get correct ASCII translation 
00BC: 22               ret
00BD: 00 00 09 00 
      00 45 39 36 
      00 30 27 20 
      45 1C 15 11 
                       .db 00h, 00h, 09h, 00h, 00h, 45h, 39h, 36h, 00h, 30h, 27
                   
                   num:
00CD: 90 FE 00         mov dptr, #0FE00h
00D0: F0               movx @dptr, A       ; Move in the low byte to #FE00h
00D1: 90 FE 00         mov dptr, #0FE00h
00D4: 74 01            mov a, #01h
00D6: F0               movx @dptr, A       ; Move in the high byte to #FE00h
